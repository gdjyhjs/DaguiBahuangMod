<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NStandard</name>
    </assembly>
    <members>
        <member name="T:NStandard.Caching.UpdateCacheExpirationDelegate">
            <summary>
            
            </summary>
            <param name="cacheTime"></param>
            <returns>Expiration Time</returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.Base64(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with base-64 digits.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.UrlSafeBase64(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with url safe base-64 digits.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.ToHexString(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with hex digits.
            </summary>
            <param name="bytes"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.HexString(System.Byte[],System.String)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with hex digits.
            </summary>
            <param name="bytes"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.String(System.Byte[])">
            <summary>
            Decodes all the bytes in the specified byte(UTF-8) array into a string.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.String(System.Byte[],System.String)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.BytesConvert.String(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.ConvertBase64ToUrlSafeBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as url safe base-64 digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.ConvertUrlSafeBase64ToBase64(System.String)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with url safe base-64 digits.
            </summary>
            <param name="urlBase64"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.Base64Bytes(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.UrlSafeBase64Bytes(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as url safe base-64 digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.FromHexString(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Converts.StringConvert.FromHexString(System.String,System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:NStandard.DayMode">
            <summary>
            Indicates Weekday or Weekend.
            </summary>
        </member>
        <member name="F:NStandard.DayMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:NStandard.DayMode.Weekday">
            <summary>
            Indicates Monday, Tuesday, Wednesday, Thursday, Friday.
            </summary>
        </member>
        <member name="F:NStandard.DayMode.Weekend">
            <summary>
            Indicates Saturday, Sunday.
            </summary>
        </member>
        <member name="T:NStandard.Scope`1">
            <summary>
            Cooperate with 'using' keyword to use thread safe <see cref="T:NStandard.Scope`1"/>.
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="M:NStandard.Security.RsaProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypt data for Pkcs1 padding.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Security.RsaProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
            <summary>
            Encrypt data.
            </summary>
            <param name="data"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Security.RsaProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypt data for Pkcs1.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Security.RsaProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
            <summary>
            Decrypt data.
            </summary>
            <param name="data"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.Security.AesProvider.#ctor(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create an AesProvider.
            </summary>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.Security.AesProvider.#ctor(System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create an AesProvider.
            </summary>
            <param name="key">The length of Key must be 16, 24 or 32.</param>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.Security.DesProvider.#ctor(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create a DesProvider.
            </summary>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.Security.DesProvider.#ctor(System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create a DesProvider.
            </summary>
            <param name="key">The length of Key must be 8.</param>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.Security.TripleDesProvider.#ctor(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create a <see cref="T:NStandard.Security.TripleDesProvider"/>.
            </summary>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.Security.TripleDesProvider.#ctor(System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Create a <see cref="T:NStandard.Security.TripleDesProvider"/>.
            </summary>
            <param name="key">The length of Key must be 8.</param>
            <param name="cipher"></param>
            <param name="padding"></param>
        </member>
        <member name="M:NStandard.ColorEx.CreateFromAhsv(System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha(255) + HSV model.
            </summary>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:NStandard.ColorEx.CreateFromAhsv(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha + HSV model.
            </summary>
            <param name="alpha"></param>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:NStandard.ConvertEx.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
                (Enhance: Support Nullable types.)
            </summary>
            <param name="value">An object that implements the System.IConvertible interface.</param>
            <param name="conversionType">The type of object to return.</param>
        </member>
        <member name="F:NStandard.DateTimeEx.UnixMinValue">
            <summary>
            Gets the DateTime(UTC) of UnixMinValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of milliseconds that have elapsed
                since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of seconds that have elapsed since
                1970-01-01T00:00:00Z to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.GetMonths(System.DateTime,System.DateTime)">
            <summary>
            Gets the range of months.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.GetDays(System.DateTime,System.DateTime)">
            <summary>
            Gets the range of days.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.YearDiff(System.DateTime,System.DateTime)">
            <summary>
            The number of complete years in the period. [ Similar as DATEDIF(*, *, "Y") function in Excel. ]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.TotalYearDiff(System.DateTime,System.DateTime)">
            <summary>
            The number of complete years in the period, expressed in whole and fractional year. [ Similar as DATEDIF(*, *, "Y") function in Excel. ]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.MonthDiff(System.DateTime,System.DateTime)">
            <summary>
            The number of complete months in the period, similar as DATEDIF(*, *, "M") function in Excel, but more accurate.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.TotalMonthDiff(System.DateTime,System.DateTime)">
            <summary>
            The number of complete months in the period, expressed in whole and fractional month. [ similar as DATEDIF(*, *, "M") function in Excel. ]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.ParseFromWeek(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets a DateTime for the specified week of year.
            </summary>
            <param name="year"></param>
            <param name="week"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.ParseFromWeek(System.Int32,System.Int32,System.DateTimeKind,System.DayOfWeek)">
            <summary>
            Gets a DateTime for the specified week of year.
            </summary>
            <param name="year"></param>
            <param name="week"></param>
            <param name="kind"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.ParseExtract(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date and time to its System.DateTime
                equivalent using the specified format and culture-specific format information.
                The format of the string representation must match the specified format exactly.
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.TryParseExtract(System.String,System.String,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its System.DateTime
                equivalent using the specified format, culture-specific format information, and
                style. The format of the string representation must match the specified format
                exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeEx.DaysInYear(System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            If the specified year is a leap year, return 366, else return 365.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="F:NStandard.DateTimeOffsetEx.UnixMinValue">
            <summary>
            Gets the DateTimeOffset(UTC) of UnixMinValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of milliseconds that have elapsed
                since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of seconds that have elapsed since
                1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.GetMonths(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Gets the range of months.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.GetDays(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Gets the range of days.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.YearDiff(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            The number of complete years in the period, similar as DATEDIF(*, *, "Y") function in Excel.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.MonthDiff(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            The number of complete months in the period, similar as DATEDIF(*, *, "M") function in Excel.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.ExactYearDiff(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            The number of complete years in the period, return a double value.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.ExactMonthDiff(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            The number of complete months in the period, return a double value.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.ParseFromWeek(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets a DateTimeOffset for the specified week of year.
            </summary>
            <param name="year"></param>
            <param name="week"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.ParseFromWeek(System.Int32,System.Int32,System.TimeSpan,System.DayOfWeek)">
            <summary>
            Gets a DateTimeOffset for the specified week of year.
            </summary>
            <param name="year"></param>
            <param name="week"></param>
            <param name="offset"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.ParseExtract(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date and time to its System.DateTimeOffset
                equivalent using the specified format and culture-specific format information.
                The format of the string representation must match the specified format exactly.
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.DateTimeOffsetEx.TryParseExtract(System.String,System.String,System.DateTimeOffset@)">
            <summary>
            Converts the specified string representation of a date and time to its System.DateTimeOffset
                equivalent using the specified format, culture-specific format information, and
                style. The format of the string representation must match the specified format
                exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.MathEx.Permutation(System.Int32,System.Int32)">
            <summary>
            The choice of m things from a set of n things without replacement and where the order matters.
            </summary>
            <param name="choice">The m value.</param>
            <param name="total">The n value.</param>
            <returns></returns>
        </member>
        <member name="M:NStandard.MathEx.Combination(System.Int32,System.Int32)">
            <summary>
            The choice of m things from a set of n things without replacement and where order does not matter.
            </summary>
            <param name="choice">The m value.</param>
            <param name="total">The n value.</param>
            <returns></returns>
        </member>
        <member name="M:NStandard.ObjectEx.CrossEquals``1(``0[])">
            <summary>
            Determines whether the specified objects are equal to each other.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.StringEx.CommonStarts(System.String[])">
            <summary>
            Get the common starts of the specified strings.
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.StringEx.PascalCase(System.String)">
            <summary>
            Converts a string to PascalCase string. e.g. DotNET.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.StringEx.CamelCase(System.String)">
            <summary>
            Converts a string to CamelCase string. e.g. dotNET.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.StringEx.KebabCase(System.String)">
            <summary>
            Converts a string to KebabCase string. e.g. dot-net.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.StringEx.Extract``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.FormattableString}})">
            <summary>
            Projects some strings back into an instance's field or property. (Using `?` on the right side of a variable disables greedy matching)
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="source"></param>
            <param name="instance"></param>
            <param name="patternExp"></param>
        </member>
        <member name="M:NStandard.XArray.String(System.Byte[])">
            <summary>
            Decodes all the bytes in the specified byte(Default: UTF-8) array into a string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.String(System.Byte[],System.String)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.String(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.ToMultiArray``1(``0[][])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.ToMultiArray``1(``0[][][])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Each``1(``0[][],System.Action{``0,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Each``1(``0[][][],System.Action{``0,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[],System.Func{System.Int32,``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[],System.Func{``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[],System.Int32,``0[])">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="offset"></param>
            <param name="inits"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:],System.Func{System.Int32,``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:],System.Func{System.Int32,System.Int32,``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:],System.Func{``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:],System.Tuple{System.Int32,System.Int32},``0[])">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="offset"></param>
            <param name="inits"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:],System.Int32,``0[])">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="offset"></param>
            <param name="inits"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:,0:],System.Func{System.Int32,``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:,0:],System.Func{System.Int32,System.Int32,System.Int32,``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:,0:],System.Func{``0})">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:,0:],System.Tuple{System.Int32,System.Int32,System.Int32},``0[])">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="offset"></param>
            <param name="inits"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Let``1(``0[0:,0:,0:],System.Int32,``0[])">
            <summary>
            Use a method to initialize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="offset"></param>
            <param name="inits"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.ToJaggedArray``1(``0[0:,0:])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.ToJaggedArray``1(``0[0:,0:,0:])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Each``1(``0[0:,0:],System.Action{``0,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Each``1(``0[0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:],System.Func{``0,System.Int32,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:],System.Func{``0,System.Int32,System.Int32,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:,0:],System.Func{``0,System.Int32,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Select``2(``0[0:,0:,0:],System.Func{``0,System.Int32,System.Int32,System.Int32,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.LBound(System.Array)">
            <summary>
            Gets the index of the first element in the array.
                Usually, LBound() returns 0, since arrays are zero-based by default.
                but in some rare cases they are not.
                For example, you use Array.CreateInstance(Type, int[], int[]) to create an Array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.UBound(System.Array)">
            <summary>
            Gets the index of the last element in the array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.IndexOf``1(``0[],``0)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.IndexOf``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.IndexOf``1(``0[],System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this string.
            </summary>
            <param name="this"></param>
            <param name="predicate"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.IndexOf``1(``0[],System.Func{``0,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this string.
            </summary>
            <param name="this"></param>
            <param name="predicate"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Slice``1(``0[],System.Int32)">
            <summary>
            Retrieves an array from this instance. The new array starts at a specified
                element position and continues to the end of the array.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves an array from this instance. The new array starts at a specified
                element position and ends with a specified element position.
                (If the parameters is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.Shuffle``1(``0[])">
            <summary>
            Shuffles array and returns itself.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XArray.AsKvPairs``1(``0[])">
            <summary>
            Returns a collection of KeyValuePair which contains the element's index(Key) and value.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XChar.GetLengthA(System.Char)">
            <summary>
            Gets the length of the specified char as Ascii.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XChar.ToLower(System.Char)">
            <summary>
            Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XChar.ToUpper(System.Char)">
            <summary>
            Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="thsi"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.PastDay(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a past day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.FutureDay(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a future day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.WeekInMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a month for the specified date.
            (eg. If define Sunday as the fisrt day of the week, its first appearance means week 1, before is week 0.)
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.Week(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a year for the specified date. 
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfYear(System.DateTime)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfMonth(System.DateTime)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfDay(System.DateTime)">
            <summary>
            Get the start point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfHour(System.DateTime)">
            <summary>
            Get the start point of the sepecified hour.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfMinute(System.DateTime)">
            <summary>
            Get the start point of the sepecified minute.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.StartOfSecond(System.DateTime)">
            <summary>
            Get the start point of the sepecified second.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfYear(System.DateTime)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfMonth(System.DateTime)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfDay(System.DateTime)">
            <summary>
            Get the end point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfHour(System.DateTime)">
            <summary>
            Get the end point of the sepecified hour.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfMinute(System.DateTime)">
            <summary>
            Get the end point of the sepecified minute.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.EndOfSecond(System.DateTime)">
            <summary>
            Get the end point of the sepecified second.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.AddDays(System.DateTime,System.Int32,NStandard.DayMode)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of complete years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.AddYearDiff(System.DateTime,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of complete years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.AddMonthDiff(System.DateTime,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of complete months to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.AddTotalYearDiff(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified diff-number of years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.AddTotalMonthDiff(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified diff-number of months to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedMilliseconds(System.DateTime)">
            <summary>
            Gets the number of milliseconds elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedSeconds(System.DateTime)">
            <summary>
            Gets the number of seconds elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedMinutes(System.DateTime)">
            <summary>
            Gets the number of minutes elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedHours(System.DateTime)">
            <summary>
            Gets the number of hours elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedDays(System.DateTime)">
            <summary>
            Gets the number of days elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedMonths(System.DateTime)">
            <summary>
            Gets the number of months elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTime.ElapsedYears(System.DateTime)">
            <summary>
            Gets the number of years elapsed from <see cref="F:System.DateTime.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.PastDay(System.DateTimeOffset,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a past day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.FutureDay(System.DateTimeOffset,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a future day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.WeekInMonth(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a month for the specified date.
            (eg. If define Sunday as the fisrt day of the week, its first appearance means week 1, before is week 0.)
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.Week(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a year for the specified date. 
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ToUnixTimeMilliseconds(System.DateTimeOffset)">
            <summary>
            Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ToUnixTimeSeconds(System.DateTimeOffset)">
            <summary>
            Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfYear(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfMonth(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfDay(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfHour(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified hour.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfMinute(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified minute.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.StartOfSecond(System.DateTimeOffset)">
            <summary>
            Get the start point of the sepecified second.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfYear(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfMonth(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfDay(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfHour(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified hour.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfMinute(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified minute.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.EndOfSecond(System.DateTimeOffset)">
            <summary>
            Get the end point of the sepecified second.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.AddDays(System.DateTimeOffset,System.Int32,NStandard.DayMode)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified number of complete years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.AddYearDiff(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of complete years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.AddMonthDiff(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of complete months to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.AddTotalYearDiff(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified diff-number of years to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.AddTotalMonthDiff(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified diff-number of months to the value of this instance.
            </summary>
            <param name="this"></param>
            <param name="diff"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedMilliseconds(System.DateTimeOffset)">
            <summary>
            Gets the number of milliseconds elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedSeconds(System.DateTimeOffset)">
            <summary>
            Gets the number of seconds elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedMinutes(System.DateTimeOffset)">
            <summary>
            Gets the number of minutes elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedHours(System.DateTimeOffset)">
            <summary>
            Gets the number of hours elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedDays(System.DateTimeOffset)">
            <summary>
            Gets the number of days elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedMonths(System.DateTimeOffset)">
            <summary>
            Gets the number of months elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDateTimeOffset.ElapsedYears(System.DateTimeOffset)">
            <summary>
            Gets the number of years elapsed from <see cref="F:System.DateTimeOffset.MinValue"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDelegate.Higher``1(System.Func{``0,``0},System.Int32)">
            <summary>
            Convert a function to its higher-order form.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XDelegate.Higher``1(NStandard.UnaryOpFunc{``0},System.Int32)">
            <summary>
            Convert a function to its higher-order form.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt32.IsOdd(System.Int32)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt32.IsEven(System.Int32)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt32.Mod(System.Int32,System.Int32)">
            <summary>
            Gets the positive integer modulus. (Unlike the operator %, this method always returns a positive number)
            </summary>
            <param name="this"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt64.IsOdd(System.Int64)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt64.IsEven(System.Int64)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XInt64.Mod(System.Int64,System.Int64)">
            <summary>
            Gets the positive integer modulus. (Unlike the operator %, this method always returns a positive number)
            </summary>
            <param name="this"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.Then``1(``0,System.Action{``0})">
            <summary>
            Run a task for the object, then return itself.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.Then``1(``0,System.Action)">
            <summary>
            Run a task for the object, then return itself.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.For``1(``0,``0@)">
            <summary>
            Run a task for the object, then return itself.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="out"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.For``2(``0,``1)">
            <summary>
            Casts the object to another object through the specified convert method.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.For``2(``0,System.Func{``0,``1})">
            <summary>
            Casts the object to another object through the specified convert method.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.For``3(``0,System.Func{``0,``1,``2},``1)">
            <summary>
            Casts the object to another object through the specified convert method.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TParam"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="param"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.Forward``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Calculate the element by path and return the element that meet the stop condition.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="forward"></param>
            <param name="stopCondition"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.Forward``1(``0,System.Func{``0,``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Calculate the element by path and return the element that meet the stop condition.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="forward"></param>
            <param name="stopCondition"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.Forward``1(``0,System.Func{``0,``0},System.Int32)">
            <summary>
            Calculate the element by path and return the element that meet the stop condition.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="forward"></param>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.IsNull``1(``0)">
            <summary>
            Determines whether the specified object is null.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.MemoryAs``1(System.Object)">
            <summary>
            Convert a basic struct to another basic struct with same memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XObject.MemoryAs(System.Object,System.Type)">
            <summary>
            Convert a basic struct to another basic struct with same memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an System.String.Empty string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IsEmpty(System.String)">
            <summary>
            Indicates whether the specified string is an System.String.Empty string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IsWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is empty, or consists only of white-space characters.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Center(System.String,System.Int32,System.Char)">
            <summary>
            Returns centered in a string of length width. Padding is done using the specified fillchar (default is an ASCII space).
            </summary>
            <param name="this"></param>
            <param name="widthA"></param>
            <param name="fillChar"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IsMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the string matches the specified regular expression.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Slice(System.String,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
                character position and continues to the end of the string.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
                character position and ends with a specified character position.
                (If the parameters is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.CharAt(System.String,System.Int32)">
            <summary>
            Returns the char at a specified index in the string.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Repeat(System.String,System.Int32)">
            <summary>
            Returns a string which is equivalent to adding it to itself n times.
            </summary>
            <param name="this"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Count(System.String,System.String,System.Boolean)">
            <summary>
            Returns the number of occurrences of substring which in the specified string.
            </summary>
            <param name="this"></param>
            <param name="searchString"></param>
            <param name="overlapping"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.NormalizeNewLine(System.String)">
            <summary>
            Returns a new string which is normalized by the newline string of current environment.
            <para>If a string come from non-Unix platforms, then its NewLine is "\r\n".</para>
            <para>If a string come from Unix platforms, then its NewLine is "\n".</para>
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.GetPureLines(System.String,System.Boolean)">
            <summary>
            Divides a string into multi-lines (ignore Empty or WhiteSpace). If the string is null, return string[0]. 
            (Perhaps you should set `normalizeNewLine` to true to convert the NewLine 
                which is defined in other system into the current system's.)
            </summary>
            <param name="this"></param>
            <param name="normalizeNewLine"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.GetLines(System.String,System.Boolean)">
            <summary>
            Divides a string into multi-lines. If the string is null, return string[0]. 
            (Perhaps you should set `normalizeNewLine` to true to convert the NewLine 
                which is defined in other system into the current system's.)
            </summary>
            <param name="this"></param>
            <param name="normalizeNewLine"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Unique(System.String)">
            <summary>
            Removes all leading and trailing white-space characters from the current string,
                and replaces multiple spaces with a single.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NStandard.XString.RegexReplace(System.String,System.Text.RegularExpressions.Regex,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:NStandard.XString.RegexReplace(System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)" -->
        <member name="M:NStandard.XString.Extract(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Extract strings by using regular expressions.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.ExtractFirst(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Extract string by using regular expressions. If no match, return null.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Resolve(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Projects the specified string to an array by using regular expressions.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.TryResolve(System.String,System.Text.RegularExpressions.Regex,System.String[][]@)">
            <summary>
            Projects the specified string to an array by using regular expressions.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.UnitInsert(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a new string which is consisting of many units by the specified length number of characters.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <param name="unitLength"></param>
            <param name="padRight"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.CapitalizeFirst(System.String,System.Boolean)">
            <summary>
            Returns a copy of the string with its first character capitalized.
            </summary>
            <param name="this"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.GetLengthA(System.String)">
            <summary>
            Gets the length of the specified string as Ascii.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.PadLeftA(System.String,System.Int32)">
            <summary>
            Returns a new string that right-aligns the characters in this string by padding
                them on the right with a specified Ascii character, for a specified total length.
            </summary>
            <param name="this"></param>
            <param name="totalWidth"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.PadLeftA(System.String,System.Int32,System.Char)">
            <summary>
            Returns a new string that right-aligns the characters in this string by padding
                them on the right with a specified Ascii character, for a specified total length.
            </summary>
            <param name="this"></param>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.PadRightA(System.String,System.Int32)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding
                them on the right with a specified Ascii character, for a specified total length.
            </summary>
            <param name="this"></param>
            <param name="totalWidth"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.PadRightA(System.String,System.Int32,System.Char)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding
                them on the right with a specified Ascii character, for a specified total length.
            </summary>
            <param name="this"></param>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IndexOf(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this string.
            </summary>
            <param name="this"></param>
            <param name="predicate"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.IndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this string.
            </summary>
            <param name="this"></param>
            <param name="predicate"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Bytes(System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes(UTF-8), then returns it.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Bytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes, then returns it.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XString.Bytes(System.String,System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes, then returns it.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XType.GetExtendChain(System.Type)">
            <summary>
            Get the specified type's extend chain.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt32.IsOdd(System.UInt32)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt32.IsEven(System.UInt32)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt32.Mod(System.UInt32,System.UInt32)">
            <summary>
            Gets the positive integer modulus. (Unlike the operator %, this method always returns a positive number)
            </summary>
            <param name="this"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt64.IsOdd(System.UInt64)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt64.IsEven(System.UInt64)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XUInt64.Mod(System.UInt64,System.UInt64)">
            <summary>
            Gets the positive integer modulus. (Unlike the operator %, this method always returns a positive number)
            </summary>
            <param name="this"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.AsKvPairs``1(System.Collections.IEnumerable)">
            <summary>
            Returns a collection of tuples containing values and indexes.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.AsKvPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of KeyValuePair which contains the element's index(Key) and value.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.Each``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.Each``1(System.Collections.IEnumerable,System.Action{``0,System.Int32})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:NStandard.XIEnumerable.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:System.FormattableString">
            <summary>
            A composite format string along with the arguments to be formatted. An instance of this
            type may result from the use of the C# or VB language primitive "interpolated string".
            </summary>
        </member>
        <member name="P:System.FormattableString.Format">
            <summary>
            The composite format string.
            </summary>
        </member>
        <member name="M:System.FormattableString.GetArguments">
            <summary>
            Returns an object array that contains zero or more objects to format. Clients should not
            mutate the contents of the array.
            </summary>
        </member>
        <member name="P:System.FormattableString.ArgumentCount">
            <summary>
            The number of arguments to be formatted.
            </summary>
        </member>
        <member name="M:System.FormattableString.GetArgument(System.Int32)">
            <summary>
            Returns one argument to be formatted from argument position <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
            <summary>
            Format to a string using the given culture.
            </summary>
        </member>
        <member name="M:System.FormattableString.Invariant(System.FormattableString)">
            <summary>
            Format the given object in the invariant culture. This static method may be
            imported in C# by
            <code>
            using static System.FormattableString;
            </code>.
            Within the scope
            of that import directive an interpolated string may be formatted in the
            invariant culture by writing, for example,
            <code>
            Invariant($"{{ lat = {latitude}; lon = {longitude} }}")
            </code>
            </summary>
        </member>
        <member name="M:System.FormattableString.CurrentCulture(System.FormattableString)">
            <summary>
            Format the given object in the current culture. This static method may be
            imported in C# by
            <code>
            using static System.FormattableString;
            </code>.
            Within the scope
            of that import directive an interpolated string may be formatted in the
            current culture by writing, for example,
            <code>
            CurrentCulture($"{{ lat = {latitude}; lon = {longitude} }}")
            </code>
            </summary>
        </member>
        <member name="M:System.HashCode.AddBytes(System.Byte[])">
            <summary>Adds a span of bytes to the hash code.</summary>
            <param name="value">The span.</param>
            <remarks>
            This method does not guarantee that the result of adding a span of bytes will match
            the result of adding the same bytes individually.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
            <summary>
            A factory type used by compilers to create instances of the type <see cref="T:System.FormattableString"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
            <summary>
            Create a <see cref="T:System.FormattableString"/> from a composite format string and object
            array containing zero or more objects to format.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ITuple">
            <summary>
            This interface is required for types that want to be indexed into by dynamic patterns.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ITuple.Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.HashAlgorithmName">
             <summary>
             Specifies the name of a cryptographic hash algorithm.
             </summary>
             <remarks>
             Asymmetric Algorithms implemented using Microsoft's CNG (Cryptography Next Generation) API
             will interpret the underlying string value as a CNG algorithm identifier:
               * https://msdn.microsoft.com/en-us/library/windows/desktop/aa375534(v=vs.85).aspx
            
             As with CNG, the names are case-sensitive.
            
             Asymmetric Algorithms implemented using other technologies:
                * Must recognize at least "MD5", "SHA1", "SHA256", "SHA384", and "SHA512".
                * Should recognize additional CNG IDs for any other hash algorithms that they also support.
             </remarks>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.MD5">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing "MD5"
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA1">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing "SHA1"
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA256">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing "SHA256"
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA384">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing "SHA384"
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA512">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing "SHA512"
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)">
            <summary>
            Gets a <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> representing a custom name.
            </summary>
            <param name="name">The custom hash algorithm name.</param>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithmName.Name">
            <summary>
            Gets the underlying string representation of the algorithm name.
            </summary>
            <remarks>
            May be null or empty to indicate that no hash algorithm is applicable.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithmName.TryFromOid(System.String,System.Security.Cryptography.HashAlgorithmName@)">
            <summary>
            Tries to convert the specified OID to a hash algorithm name.
            </summary>
            <param name="oidValue">The OID of the hash algorithm.</param>
            <param name="value">
            When this method returns <c>true</c>, the hash algorithm. When this
            method returns <c>false</c>, contains <c>default</c>.
            </param>
            <returns>
            <c>true</c> if the OID was successfully mapped to a hash
            algorithm; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oidValue" /> is null.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithmName.FromOid(System.String)">
            <summary>
            Converts the specified OID to a hash algorithm name.
            </summary>
            <param name="oidValue">The OID of the hash algorithm.</param>
            <returns>
            The hash algorithm name identified by the OID.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oidValue" /> is null.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            <paramref name="oidValue" /> does not represent a known hash algorithm.
            </exception>
        </member>
        <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
            <summary>
            Specifies the padding mode and parameters to use with RSA encryption or decryption operations.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
            <summary>
            <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1"/> mode.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
            <summary>
            <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/> mode with SHA1 hash algorithm.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
            <summary>
            <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/> mode with SHA256 hash algorithm.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
            <summary>
            <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/> mode with SHA384 hash algorithm.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
            <summary>
            <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/> mode with SHA512 hash algorithm.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
            <summary>
            Creates a new instance representing <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/>
            with the given hash algorithm.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
            <summary>
            Gets the padding mode to use.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
            <summary>
            Gets the padding mode to use in conjunction with <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/>.
            </summary>
            <remarks>
            If <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode"/> is not <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep"/>, then <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> will be null.
            </remarks>
        </member>
        <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
            <summary>
            Specifies the padding mode to use with RSA encryption or decryption operations.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
            <summary>
            PKCS #1 v1.5.
            </summary>
            <remarks>
            This mode corresponds to the RSAES-PKCS1-v1_5 encryption scheme described in the PKCS #1 RSA Encryption Standard.
            It is supported for compatibility with existing applications.
            </remarks>
        </member>
        <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
            <summary>
            Optimal Asymmetric Encryption Padding.
            </summary>
            <remarks>
            This mode corresponds to the RSAES-OEAP encryption scheme described in the PKCS #1 RSA Encryption Standard.
            It is recommended for new applications.
            </remarks>
        </member>
        <member name="T:System.Security.Cryptography.RSASignaturePadding">
            <summary>
            Specifies the padding mode  and parameters to use with RSA signature creation or verification operations.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
            <summary>
            <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1"/> mode.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
            <summary>
            <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss"/> mode with the number of salt bytes equal to the size of the hash.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
            <summary>
            Gets the padding mode to use.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
            <summary>
            Specifies the padding mode to use with RSA signature creation or verification operations.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
            <summary>
            PKCS #1 v1.5.
            </summary>
            <remarks>
            This corresponds to the RSASSA-PKCS1-v1.5 signature scheme of the PKCS #1 RSA Encryption Standard.
            It is supported for compatibility with existing applications.
            </remarks>
        </member>
        <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
            <summary>
            Probabilistic Signature Scheme.
            </summary>
            <remarks>
            This corresponds to the RSASSA-PKCS1-v1.5 signature scheme of the PKCS #1 RSA Encryption Standard.
            It is recommended for new applications.
            </remarks>
        </member>
        <member name="T:System.ITupleInternal">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
    </members>
</doc>
